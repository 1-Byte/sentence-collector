{"version":3,"sources":["../shared/js/collections/user.js","../shared/js/db.js","init-db.js"],"names":["NAME","User","kintoServer","kintoBucket","id","server","bucket","getId","result","fetchServerInfo","user","tryAuth","username","DB","BUCKET_NAME","collection","createRecord","log","err","COLLECTION_NAME","REMOTE_URL","password","defaultOptions","KintoClient","Bucket","authenticated","auth","authed","initDB","createBucket","permissions","createCollection","error","run","global","fetch","require","then","console","bind","catch"],"mappings":";AAuCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvCA,IAAA,EAAA,QAAA,cAuCA,EAAA,EAAA,GAtCA,EAAA,QAAA,4BAsCA,EAAA,EAAA,GArCA,EAAA,QAAA,gCAqCA,EAAA,EAAA,GAnCA,EAAA,QAAA,YAmCA,EAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjCA,MAAMA,EAAO,aAEQC,EAEPC,YAAAA,EAA0BC,GAC/BC,KAAAA,GAAK,KACLC,KAAAA,OAASH,EACTI,KAAAA,OAASH,EAGVI,cACEC,MAAAA,QAAe,KAAKH,OAAOI,kBAC5BL,KAAAA,GAAKI,EAAOE,KAAKN,GAGlBO,cAAQC,GACR,IACIN,MAAAA,QAAe,KAAKD,OAAOC,OAAOO,EAAGC,QAAAA,aACrCC,QAAmBT,EAAOS,WAAWf,GACrCQ,QAAeO,EAAWC,aAAa,CACvCJ,GAAAA,EACE,KAAA,CACMA,SAAAA,KAINK,QAAAA,IAAI,UAAWT,GACvB,MAAOU,GACCD,QAAAA,IAAI,eAAgBC,KA1BbjB,QAAAA,QAAAA,EA+BrBA,EAAKkB,gBAAkBnB;;ACiBvB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxDA,IAAA,EAAA,QAAA,QAwDA,EAAA,EAAA,GAvDA,EAAA,QAAA,cAuDA,EAAA,EAAA,GAtDA,EAAA,QAAA,4BAsDA,EAAA,EAAA,GApDA,EAAA,QAAA,sBAoDA,EAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlDA,MAAMoB,EAAa,gCACbN,EAAc,YAECD,EAEPD,YAAAA,EAAUS,GACfT,KAAAA,SAAWA,EACXS,KAAAA,SAAWA,EAEVC,MAAAA,EAAiB,CACbF,OAAAA,GAGNR,GAAYS,IACC,EAAf,QAA4B,CACX,cAAA,UAAW,EAAM,EAAA,YAAET,KAAYS,OAI7ChB,KAAAA,OAAS,IAAIkB,EAAJ,QAAgBH,EAAYE,GACrChB,KAAAA,OAAS,IAAIkB,EAAJ,QAAW,KAAKnB,OAAQS,GACjCJ,KAAAA,KAAO,IAAIT,EAAJ,QAAS,KAAKI,OAAQ,KAAKC,QAElCmB,KAAAA,eAAgB,EAGjBC,aACEC,MAAAA,QAAe,KAAKjB,KAAKC,QAAQ,KAAKC,UAGrCe,OAFFF,KAAAA,cAAgBE,EACbV,QAAAA,IAAI,UAAWU,GAChBA,EAGHC,eACA,IACExB,IAAAA,QAAW,KAAKM,KAAKH,cACnB,KAAKF,OAAOwB,aAAaf,GACzBR,MAAAA,QAAe,KAAKD,OAAOC,OAAOQ,EAAa,CAAEgB,YAAa,CAC3D,KAAA,CAAC,2BAKH1B,aAHDE,EAAOyB,iBAAiB9B,EAAKkB,QAAAA,gBAAiB,CAAEW,YAAa,CAChD,gBAAA,CAAC,2BAEb1B,EACP,MAAOc,GACCc,QAAAA,MAAM,aAAcd,KA1CbL,QAAAA,QAAAA,EA+CrBA,EAAGC,YAAcA;;ACzCjBmB,aAfA,IAAA,EAAA,QAAA,mBAeAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAZAC,OAAOC,MAAQC,QAAQ,cAEvB,MAAMxB,EAAW,QACXS,EAAW,WAEjB,SAASY,IACI,IAAIpB,EAAJ,QAAOD,EAAUS,GACzBO,SACAS,KAAKC,QAAQrB,IAAIsB,KAAKD,QAAS,yBAC/BE,MAAMF,QAAQN,MAAMO,KAAKD,UAG9BL","file":"init-db.map","sourceRoot":"../scripts","sourcesContent":["import KintoClient from 'kinto-http';\nimport Bucket from 'kinto-http/lib/bucket.js'\nimport Collection from 'kinto-http/lib/collection.js'\n\nimport DB from '../db.js';\n\nconst NAME = 'User';\n\nexport default class User {\n\n  constructor(kintoServer: KintoClient, kintoBucket: Bucket) {\n    this.id = null;\n    this.server = kintoServer;\n    this.bucket = kintoBucket;\n  }\n\n  async getId() {\n    const result = await this.server.fetchServerInfo();\n    this.id = result.user.id;\n  }\n\n  async tryAuth(username) {\n    try {\n      const bucket = await this.server.bucket(DB.BUCKET_NAME);\n      const collection = await bucket.collection(NAME);\n      const result = await collection.createRecord({\n        id: username,\n        data: {\n          username: username,\n        }\n      });\n\n      console.log('authed?', result);\n    } catch (err) {\n      console.log('create error', err);\n    }\n  }\n}\n\nUser.COLLECTION_NAME = NAME;\n","import btoa from 'btoa';\nimport KintoClient from 'kinto-http';\nimport Bucket from 'kinto-http/lib/bucket.js'\n\nimport User from './collections/user';\n\nconst REMOTE_URL = 'https://kinto.mozvoice.org/v1';\nconst BUCKET_NAME = 'App';\n\nexport default class DB {\n\n  constructor(username, password) {\n    this.username = username;\n    this.password = password;\n\n    const defaultOptions = {\n      remote: REMOTE_URL,\n    };\n\n    if (username && password) {\n      defaultOptions['headers'] = {\n        Authorization: \"Basic \" + btoa(`${username}:${password}`),\n      };\n    }\n\n    this.server = new KintoClient(REMOTE_URL, defaultOptions);\n    this.bucket = new Bucket(this.server, BUCKET_NAME);\n    this.user = new User(this.server, this.bucket);\n\n    this.authenticated = false;\n  }\n\n  async auth() {\n    const authed = await this.user.tryAuth(this.username);\n    this.authenticated = authed;\n    console.log('authed?', authed);\n    return authed;\n  }\n\n  async initDB() {\n    try {\n      let id = await this.user.getId();\n      await this.server.createBucket(BUCKET_NAME);\n      const bucket = await this.server.bucket(BUCKET_NAME, { permissions: {\n        read : ['system.Authenticated'],\n      }});\n      await bucket.createCollection(User.COLLECTION_NAME, { permissions: {\n        'record:create': ['system.Authenticated'],\n      }});\n      return id;\n    } catch (err) {\n      console.error('init error', err);\n    }\n  }\n}\n\nDB.BUCKET_NAME = BUCKET_NAME;\n","import DB from '../shared/js/db';\n\n// Kinto http needs fetch on the global scope.\nglobal.fetch = require('node-fetch');\n\nconst username = 'admin';\nconst password = 'password';\n\nfunction run() {\n  const db = new DB(username, password);\n  db.initDB()\n    .then(console.log.bind(console, 'database initialized'))\n    .catch(console.error.bind(console));\n}\n\nrun();\n"]}